module IK.Term where

--
-- Implementation of the IK (Intuitionistic K) calculus from
-- "Fitch-Style Modal Lambda Calculi" by Ranald Clouston (2018)
--

open import IK.Type public
open import Context (Ty) public

------------------------------------
-- Variables, terms and substituions
------------------------------------

data Tm : Ctx â†’ Ty â†’ Set where

  var  : Var Î“ a
       ---------
       â†’ Tm Î“ a

  lam  : Tm (Î“ `, a) b
         -------------
       â†’ Tm Î“ (a â‡’ b)

  app  : Tm Î“ (a â‡’ b) â†’ Tm Î“ a
         ---------------------
       â†’ Tm Î“ b

  box   : Tm (Î“ ðŸ”’) a
        ------------
        â†’ Tm Î“ (â—» a)

  unbox : Tm Î“L (â—» a) â†’ LFExt Î“ (Î“L ðŸ”’) Î“R
        -------------------------
        â†’ Tm Î“ a

wkTm : Î“' â‰¤ Î“ â†’ Tm Î“ a â†’ Tm Î“' a
wkTm w (var x)                = var (wkVar w x)
wkTm w (lam t)                = lam (wkTm (keep w) t)
wkTm w (app t u)              = app (wkTm w t) (wkTm w u)
wkTm w (box t)                = box (wkTm (keepðŸ”’ w) t)
wkTm w (unbox t e)            = unbox (wkTm (sliceLeft e w) t) (wkLFExt e w)

open import Substitution Ty Tm var wkTm public

-- apply substitution to a term
substTm : Sub Î” Î“ â†’ Tm Î“ a â†’ Tm Î” a
substTm s (var x)     = substVar s x
substTm s (lam t)     = lam (substTm (wkSub fresh s `, var ze) t)
substTm s (app t u)   = app (substTm s t) (substTm s u)
substTm s (box t)     = box (substTm (lock s nil) t)
substTm (s `, _) (unbox t (ext e)) = substTm s (unbox t e)
substTm (lock s x) (unbox t nil) = unbox (substTm s t) x

-- substitution composition
_âˆ™â‚›_ : Sub Î” Î“ â†’ Sub Î”' Î” â†’ Sub Î”' Î“
[]             âˆ™â‚› s'    = []
(s `, t)       âˆ™â‚› s'    = (s âˆ™â‚› s') `, substTm s' t
lock s (ext e) âˆ™â‚› (s' `, x) = lock s e âˆ™â‚› s'
lock s nil     âˆ™â‚› lock s' x = lock (s âˆ™â‚› s') x
