module IK.Reduction where

open import IK.Term
open import IK.HellOfSyntacticLemmas
  using (beta-wk-lemma ; keepFreshLemma ; sliceCompLemma)

open import Relation.Nullary using (Â¬_)
open import Relation.Binary.Construct.Closure.ReflexiveTransitive
  using (Star)
  renaming (_â—…â—…_ to multi) public

open import Relation.Binary.PropositionalEquality
  using (_â‰¡_ ; cong ; congâ‚‚)

open Star
open _â‰¡_

-------------------
-- Reduction rules
-------------------

data _âŸ¶_ : Tm Î“ a â†’ Tm Î“ a â†’ Set where

  red-fun : {t : Tm (Î“ `, a) b} {u : Tm Î“ a}
    â†’ (app (lam t) u) âŸ¶ substTm (idâ‚› `, u) t

  exp-fun : {t : Tm Î“ (a â‡’ b)}
    â†’ t âŸ¶ lam (app (wkTm fresh t) (var ze))

  red-box : {t : Tm (Î“L ðŸ”’) a} {e : LFExt Î“ (Î“L ðŸ”’) Î“R}
    â†’ unbox (box t) e âŸ¶ wkTm (LFExtToâ‰¤ e) t

  exp-box : {t : Tm Î“ (â—» a)}
    â†’ t âŸ¶ box (unbox t nil)

  cong-lam : {t t' : Tm (Î“ `, a) b}
    â†’ t âŸ¶ t'
    â†’ (lam t) âŸ¶ (lam t')

  cong-app1 : {t t' : Tm Î“ (a â‡’ b)} {u : Tm Î“ a}
    â†’ t âŸ¶ t'
    â†’ (app t u) âŸ¶ (app t' u)

  cong-app2 : {t : Tm Î“ (a â‡’ b)} {u u' : Tm Î“ a}
    â†’ u âŸ¶ u'
    â†’ (app t u) âŸ¶ (app t u')

  cong-box : {t t' : Tm (Î“ ðŸ”’) a}
    â†’ t âŸ¶ t'
    â†’ (box t) âŸ¶ (box t')

  cong-unbox : {t t' : Tm Î“L (â—» a)} {e : LFExt Î“ (Î“L ðŸ”’) Î“R}
    â†’ t âŸ¶ t'
    â†’ (unbox t e) âŸ¶ (unbox t' e)


-- zero or more steps of reduction
_âŸ¶*_ : Tm Î“ a â†’ Tm Î“ a â†’ Set
_âŸ¶*_ = Star (_âŸ¶_)

zero : {t t' : Tm Î“ a} â†’ t â‰¡ t' â†’ t âŸ¶* t'
zero refl = Îµ

one : {t t' : Tm Î“ a} â†’ t âŸ¶ t' â†’ t âŸ¶* t'
one t = t Star.â—… Îµ

cong-box* : {t t' : Tm (Î“ ðŸ”’) a}
  â†’ t âŸ¶* t'
  â†’ (box t) âŸ¶* (box t')
cong-box* Îµ       = Îµ
cong-box* (x â—… r) = cong-box x â—… cong-box* r

cong-unbox* : {t t' : Tm Î“L (â—» a)} {e : LFExt Î“ (Î“L ðŸ”’) Î“R}
  â†’ t âŸ¶* t'
  â†’ (unbox t e) âŸ¶* (unbox t' e)
cong-unbox* Îµ       = Îµ
cong-unbox* (x â—… r) = cong-unbox x â—… cong-unbox* r

cong-lam* : {t t' : Tm (Î“ `, a) b}
  â†’ t âŸ¶* t'
  â†’ (lam t) âŸ¶* (lam t')
cong-lam* Îµ       = Îµ
cong-lam* (x â—… r) = cong-lam x â—… cong-lam* r

cong-app*  : {t t' : Tm Î“ (a â‡’ b)} {u u' : Tm Î“  a}
  â†’ t âŸ¶* t' â†’ u âŸ¶* u'
  â†’ (app t u) âŸ¶* (app t' u')
cong-app* Îµ        Îµ        = Îµ
cong-app* (x â—… r1) Îµ        = cong-app1 x â—… cong-app* r1 Îµ
cong-app* r1       (x â—… r2) = cong-app2 x â—… cong-app* r1 r2


invRed :  {t t' : Tm Î“ a}
  â†’ (w : Î” â‰¤ Î“)
  â†’ t âŸ¶ t'
  â†’ wkTm w t âŸ¶* wkTm w t'
invRed w (red-fun {t = t} {u = u})
  = multi (one red-fun) (zero (beta-wk-lemma w u t))
invRed w exp-fun
  = multi (one exp-fun) (zero (cong lam (congâ‚‚ app keepFreshLemma refl)))
invRed w (red-box {e = e})
  = multi (one red-box) (zero (sliceCompLemma w e _))
invRed w exp-box
  = one exp-box
invRed w (cong-lam r)
  = cong-lam* (invRed (keep w) r)
invRed w (cong-box r)
  = cong-box* (invRed (keepðŸ”’ w) r)
invRed w (cong-unbox r)
  = cong-unbox* (invRed (sliceLeft _ w) r)
invRed w (cong-app1 r)
  = cong-app* (invRed w r) Îµ
invRed w (cong-app2 r)
  = cong-app* Îµ (invRed w r)

invRed* :  {t t' : Tm Î“ a}
  â†’ (w : Î” â‰¤ Î“)
  â†’ t âŸ¶* t'
  â†’ wkTm w t âŸ¶* wkTm w t'
invRed* w Îµ       = Îµ
invRed* w (x â—… r) = multi (invRed w x) (invRed* w r)
