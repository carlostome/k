module IS4.Term where

--
-- Implementation of the IS4 (Intuitionistic S4) calculus from
-- "Fitch-Style Modal Lambda Calculi" by Ranald Clouston (2018)
--

open import IK.Type public
open import Context (Ty) hiding (extðŸ”’) public

------------------------------------
-- Variables, terms and substituions
------------------------------------

data Tm : Ctx â†’ Ty â†’ Set where

  var  : Var Î“ a
       ---------
       â†’ Tm Î“ a

  lam  : Tm (Î“ `, a) b
         -------------
       â†’ Tm Î“ (a â‡’ b)

  app  : Tm Î“ (a â‡’ b) â†’ Tm Î“ a
         ---------------------
       â†’ Tm Î“ b

  box   : Tm (Î“ ðŸ”’) a
        ------------
        â†’ Tm Î“ (â—» a)

  unbox : Tm Î“L (â—» a) â†’ CExt Î“ Î“L Î“R
        ----------------------------
        â†’ Tm Î“ a

wkTm : Î“' â‰¤ Î“ â†’ Tm Î“ a â†’ Tm Î“' a
wkTm w (var x)     = var (wkVar w x)
wkTm w (lam t)     = lam (wkTm (keep w) t)
wkTm w (app t u)   = app (wkTm w t) (wkTm w u)
wkTm w (box t)     = box (wkTm (keepðŸ”’ w) t)
wkTm w (unbox t e) = unbox (wkTm (factor2â‰¤ e w) t) (factor2Ext e w)

open import IS4.Substitution Ty Tm var wkTm public

-- apply substitution to a term
substTm : Sub Î” Î“ â†’ Tm Î“ a â†’ Tm Î” a
substTm s                                (var x)
  = substVar s x
substTm s                                (lam t)
  = lam (substTm (wkSub fresh s `, var ze) t)
substTm s                                (app t u)
  = app (substTm s t) (substTm s u)
substTm s                                (box t)
  = box (substTm (lock s (extðŸ”’- nil)) t)
substTm s                                (unbox t nil)
  = unbox (substTm s t) nil
substTm (s `, _)                         (unbox t (ext e))
  = substTm s (unbox t e)
substTm (lock s nil)                     (unbox t (extðŸ”’- e))
  = substTm s (unbox t e)
substTm (lock s (ext e'))                (unbox t (extðŸ”’- e))
  = wkTm fresh (substTm (lock s e') (unbox t (extðŸ”’- e)))
substTm (lock s (extðŸ”’- e'))             (unbox t (extðŸ”’- nil))
  = unbox (substTm s t) (extðŸ”’- e')
substTm (lock (s `, _) (extðŸ”’- e'))      (unbox t (extðŸ”’- (ext e)))
  = substTm (lock s (extðŸ”’- e')) (unbox t (extðŸ”’- e))
substTm (lock (lock s e'') (extðŸ”’- e')) (unbox t (extðŸ”’- (extðŸ”’- e)))
  = substTm (lock s (extðŸ”’- (extRAssoc e'' e'))) (unbox t (extðŸ”’- e))

-- substitution composition
_âˆ™â‚›_ : Sub Î” Î“ â†’ Sub Î”' Î” â†’ Sub Î”' Î“
[]                          âˆ™â‚› s'
  = []
(s `, t)                    âˆ™â‚› s'
  = (s âˆ™â‚› s') `, substTm s' t
lock s nil                  âˆ™â‚› s'
  = lock (s âˆ™â‚› s') nil
lock s (ext e)              âˆ™â‚› (s' `, _)
  = lock s e âˆ™â‚› s'
lock s (extðŸ”’- nil)        âˆ™â‚› lock s' e'
  = lock (s âˆ™â‚› s') e'
lock s (extðŸ”’- (ext e))    âˆ™â‚› lock (s' `, _) e'
  = lock s (extðŸ”’- e) âˆ™â‚› lock s' e'
lock s (extðŸ”’- (extðŸ”’- e)) âˆ™â‚› lock (lock s' e'') e'
  = lock s (extðŸ”’- e) âˆ™â‚› lock s' (extRAssoc e'' e')
